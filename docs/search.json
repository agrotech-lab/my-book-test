[
  {
    "objectID": "precipitation/return-period-exercises.html",
    "href": "precipitation/return-period-exercises.html",
    "title": "8  Exercises",
    "section": "",
    "text": "Show/hide the code\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom functools import reduce\nimport re\nimport probscale\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport urllib.request\n\n\nGo to NOAA’s National Centers for Environmental Information (NCEI)\nClimate Data Online: Dataset Discovery\nFind station codes in this map. On the left, click on the little wrench next to “Global Summary of the Month”, then click on “identify” on the panel that just opened, and click on a station (purple circle). You will see the station’s name, it’s ID, and the period of record. For example, for Ben-Gurion’s Airport in Israel:\nBEN GURION, IS\nSTATION ID: ISM00040180\nPeriod of Record: 1951-01-01 to 2020-03-01\nYou can download daily or monthly data for each station. Use the function below to download this data to your computer. station_name can be whatever you want, station_code is the station ID.\n\n\nShow/hide the code\ndef download_data(station_name, station_code):\n    url_daily = 'https://www.ncei.noaa.gov/data/global-historical-climatology-network-daily/access/'\n    url_monthly = 'https://www.ncei.noaa.gov/data/gsom/access/'\n    # download daily data - uncomment the following 2 lines to make this work\n    # urllib.request.urlretrieve(url_daily + station_code + '.csv',\n    #                           station_name + '_daily.csv')\n    # download monthly data\n    urllib.request.urlretrieve(url_monthly + station_code + '.csv',\n                               station_name + '_monthly.csv')\n\n\nDownload daily rainfall data for Eilat, Israel. ID: IS000009972\n\n\nShow/hide the code\ndownload_data('Eilat', 'IS000009972')\n\n\nThen load the data into a dataframe.\nIMPORTANT!! daily precipitation data is in tenths of mm, divide by 10 to get it in mm.\n\n\nShow/hide the code\ndf = pd.read_csv('Eilat_daily.csv', sep=\",\")\n# make 'DATE' the dataframe index\ndf['DATE'] = pd.to_datetime(df['DATE'])\ndf = df.set_index('DATE')\n# IMPORTANT!! daily precipitation data is in tenths of mm, divide by 10 to get it in mm.\ndf['PRCP'] = df['PRCP'] / 10\ndf\n\n\n\n\n\n\n  \n    \n      \n      STATION\n      LATITUDE\n      LONGITUDE\n      ELEVATION\n      NAME\n      PRCP\n      PRCP_ATTRIBUTES\n      TMAX\n      TMAX_ATTRIBUTES\n      TMIN\n      TMIN_ATTRIBUTES\n      TAVG\n      TAVG_ATTRIBUTES\n    \n    \n      DATE\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1949-11-30\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-01\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-02\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-03\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-04\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-03-24\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      287.0\n      ,,S\n      NaN\n      NaN\n      227.0\n      H,,S\n    \n    \n      2021-03-25\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      253.0\n      ,,S\n      154.0\n      ,,S\n      202.0\n      H,,S\n    \n    \n      2021-03-26\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      251.0\n      ,,S\n      134.0\n      ,,S\n      186.0\n      H,,S\n    \n    \n      2021-03-27\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      222.0\n      ,,S\n      119.0\n      ,,S\n      173.0\n      H,,S\n    \n    \n      2021-03-28\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      238.0\n      ,,S\n      119.0\n      ,,S\n      188.0\n      H,,S\n    \n  \n\n26045 rows × 13 columns\n\n\n\nPlot precipitation data (‘PRCP’ column) and see if everything is all right.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10,7))\nax.plot(df['PRCP'])\nax.set_xlabel(\"date\")\nax.set_ylabel(\"daily rainfall (mm)\")\nax.set_title(\"Eilat, 1949–2021\")\n\n\nText(0.5, 1.0, 'Eilat, 1949–2021')\n\n\n\n\n\nBased on what you see, you might want to exclude certain periods, e.g.:\n\n\nShow/hide the code\nlast_date = '2018-08-01'\nfirst_date = '1950-08-01'\ndf = df[((df.index < last_date) & (df.index > first_date))]\ndf\n\n\n\n\n\n\n  \n    \n      \n      STATION\n      LATITUDE\n      LONGITUDE\n      ELEVATION\n      NAME\n      PRCP\n      PRCP_ATTRIBUTES\n      TMAX\n      TMAX_ATTRIBUTES\n      TMIN\n      TMIN_ATTRIBUTES\n      TAVG\n      TAVG_ATTRIBUTES\n    \n    \n      DATE\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1950-08-02\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      400.0\n      ,,G\n      240.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-03\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      410.0\n      ,,G\n      260.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-04\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      400.0\n      ,,G\n      260.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-05\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      240.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-06\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      370.0\n      ,,G\n      240.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2018-07-27\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      414.0\n      ,,S\n      NaN\n      NaN\n      359.0\n      H,,S\n    \n    \n      2018-07-28\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      386.0\n      ,,S\n      NaN\n      NaN\n      329.0\n      H,,S\n    \n    \n      2018-07-29\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      NaN\n      NaN\n      268.0\n      ,,S\n      334.0\n      H,,S\n    \n    \n      2018-07-30\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      375.0\n      ,,S\n      277.0\n      ,,S\n      327.0\n      H,,S\n    \n    \n      2018-07-31\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      390.0\n      ,,S\n      NaN\n      NaN\n      336.0\n      H,,S\n    \n  \n\n24836 rows × 13 columns\n\n\n\nThe rainfall data for Eilat is VERY seasonal, it’s easy to see that there is no rainfall at all during the summer. We can assume a hydrological year starting on 1 August. If you’re not sure, you can plot the monthly means (see last week’s lecture) and find what date makes sense best.\n\n\nShow/hide the code\ndf_month = df['PRCP'].resample('M').sum().to_frame()\nmonth_numbers = np.arange(1,13)\nmonthly_mean = np.array([])  # empty array\nfor m in month_numbers:      # cycle over months (1, 2, 3, etc)\n    this_month_mean = df_month[df_month.index.month == m].mean()  # this is the monthly mean\n    monthly_mean = np.append(monthly_mean, this_month_mean)    # append\n    # make new df and return it\ndf_month = pd.DataFrame({'monthly rainfall (mm)':monthly_mean,\n                          'month number':month_numbers\n                         })\nfig, ax = plt.subplots(figsize=(10,7))\nax.bar(df_month['month number'], df_month['monthly rainfall (mm)'])\nax.set(xlabel=\"month\",\n       ylabel=\"monthly rainfall (mm)\",\n       title=\"Monthly average, Eilat, 1949--2018\",\n       xticks=np.arange(1,13));\n\n\n\n\n\nLet’s resample the data according to the hydrological year (1 August), and we’ll keep the maximum value:\n\n\nShow/hide the code\nmax_annual = (df['PRCP'].resample('A-JUL')\n                        .max()\n                        .to_frame()\n             )\nmax_annual\n\n\n\n\n\n\n  \n    \n      \n      PRCP\n    \n    \n      DATE\n      \n    \n  \n  \n    \n      1951-07-31\n      10.8\n    \n    \n      1952-07-31\n      15.0\n    \n    \n      1953-07-31\n      34.4\n    \n    \n      1954-07-31\n      24.3\n    \n    \n      1955-07-31\n      19.0\n    \n    \n      ...\n      ...\n    \n    \n      2014-07-31\n      11.5\n    \n    \n      2015-07-31\n      2.4\n    \n    \n      2016-07-31\n      8.5\n    \n    \n      2017-07-31\n      34.5\n    \n    \n      2018-07-31\n      11.7\n    \n  \n\n68 rows × 1 columns\n\n\n\nMake two graphs: a) the histogram for the annual maximum (pdf) b) the cumulative probability (cdf)\n\n\nShow/hide the code\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10,8))\n\nh=max_annual['PRCP'].values\nax1.hist(h, bins=np.arange(0,100,10), density=True)\nax2.hist(h, bins=np.arange(0,100,10), cumulative=1, density=True)\n\nax1.set(ylabel=\"pdf\")\nax2.set(xlabel=\"annual max (mm)\",\n        ylabel=\"cdf\",\n        );\n\n\n\n\n\nCompute the plotting position and return time. You’ll need to order the data in ascending order:\nmax_annual = max_annual.sort_values(by=['PRCP'], ascending=True)\n\\(P_m=\\) plotting position, or probability of occurence for each event\n\\(n=\\) total number of events\n\\(m=\\) rank of each event, where \\(m=1\\) is the lowest value, and \\(m=n\\) is the highest\n\n8.0.0.1 Weibull plotting position:\n\\[\nP_m = \\frac{m}{n+1}\n\\]\n\n\n8.0.0.2 Return period:\n\\[\n\\text{Return period} = T_r = \\frac{1}{1-P_m}\n\\]\nPlot the annual maximum against \\(P_m\\) or against \\(T_r\\).\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10, 7))\n# resample daily data into yearly data (maximum yearly value)\nmax_annual = df['PRCP'].resample('A-JUL').max().to_frame()\n# sort yearly max from lowest to highest\nmax_annual = max_annual.sort_values(by=['PRCP'], ascending=True)\nmax_annual['rank'] = np.arange(1, len(max_annual) + 1)\nprint(max_annual)\n\nn = len(max_annual['rank'])\nm = max_annual['rank']\nPm = m / (n+1)\nTr = 1 / (1 - Pm)\n\n# ax.plot(Tr, max_annual['PRCP'])\n# ax.set(xlabel=\"return period (y)\",\n#        ylabel=\"annual maximum (mm/24h)\")\n\nax.plot(Pm, max_annual['PRCP'])\nax.set(xlabel=\"non-exeedance probability\",\n       ylabel=\"annual maximum (mm/24h)\");\n\n\n            PRCP  rank\nDATE                  \n1996-07-31   0.5     1\n2008-07-31   0.9     2\n2000-07-31   1.2     3\n2012-07-31   1.3     4\n1959-07-31   1.5     5\n...          ...   ...\n1966-07-31  33.8    64\n1953-07-31  34.4    65\n2017-07-31  34.5    66\n1981-07-31  40.6    67\n1975-07-31  64.3    68\n\n[68 rows x 2 columns]\n\n\n\n\n\nPlot the annual maximum against the exceedance probability (\\(1-P_m\\)), in a log-log scale. Use\nax.set(xscale=\"log\",\n       yscale(\"log\")\n      )\nSee what data you’ll want to use for a linear fit.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10, 6))\n\ndepth = max_annual['PRCP'].values\nexc_prob = (1-Pm).values\n\nax.plot(exc_prob, depth, lw=3)\n\nexclude = 40\ndepth_tofit = depth[exclude:]\nexc_prob_tofit = exc_prob[exclude:]\nax.plot(exc_prob_tofit, depth_tofit, 'o')\n\nax.set(ylabel=\"annual maximum (mm/24h)\",\n       xlabel=\"exceedance probability\",\n       xscale=\"log\",\n       yscale=\"log\",\n      );\n\n\n\n\n\nLet’s make a linear fit. Attention! Our data is not annual_max and exceedance_prob, but their log.\nWe make a linear fit using:\nslope, intercept = np.polyfit(xdata, ydata, 1) # the number 1 in the order of the polynomial = linear\nWrite a function that receives an exceedance probability and returns the corresponding rainfall depth.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10, 6))\n\ndepth = max_annual['PRCP'].values\nexc_prob = (1-Pm).values\n\nax.plot(exc_prob, depth, lw=3, label=\"Weibull plotting position\")\nax.set(ylabel=\"annual maximum (mm/24h)\",\n       xlabel=\"exceedance probability\")\nax.set_xscale(\"log\")\nax.set_yscale(\"log\")\n\nexclude = 40\ndepth_tofit = depth[exclude:]\nexc_prob_tofit = exc_prob[exclude:]\n\nax.plot(exc_prob_tofit, depth_tofit, 'o')\n\nexc_prob_tofit_log = np.log(exc_prob_tofit)\ndepth_tofit_log = np.log(depth_tofit)\nslope, intercept = np.polyfit(exc_prob_tofit_log, depth_tofit_log, 1)\n\ndef equation(p):\n    return np.exp(slope*np.log(p) + intercept)\nprob = [1e-3,1-1e-3]\nax.plot(prob, equation(prob), lw=3, color=\"tab:red\", alpha=0.4)\n\n\n\n\n\n\n\n8.0.1 Homework\nEverything we did today was for 24h rainfall events. We might be interested in extreme events in longer or shorter time scales. Using the following code, calculate the return time for 3-day rainfall events:\nnumber_of_days = 3\ndf2 = (df['PRCP'].rolling(number_of_days)\n                 .sum()\n                 .dropna()\n      ) \nAll the rest after that is the same…"
  }
]